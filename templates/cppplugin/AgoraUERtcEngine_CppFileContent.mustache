//  Copyright (c) 2024 Agora.io. All rights reserved.



#include "AgoraUERTCEngine.h"

#if AGORA_UESDK_ENABLE_VIDEO
#include "VideoFrameRenderManager.h"
#include "AgoraUEVideoFrameObserver.h"
using namespace agora::rtc::ue;
#endif

#if PLATFORM_ANDROID
#include "Android/AndroidApplication.h"
#include "Android/AndroidJni.h"
#endif


#if PLATFORM_IOS
#include "IOSAppDelegate.h"
#endif


#include <vector>

namespace agora {
	namespace rtc {
		namespace ue {


#pragma region Basics


			AgoraUERtcEngine* AgoraUERtcEngine::Instance = nullptr;
			std::mutex AgoraUERtcEngine::MutexLock;
			AgoraAppType AgoraUERtcEngine::RtcEngineAppType = AgoraAppType::kAppTypeUnreal;

			AgoraUERtcEngine* AgoraUERtcEngine::Get()
			{
				if (Instance == nullptr) {
					std::unique_lock<std::mutex> lock(MutexLock);
					if (Instance == nullptr) {
						Instance = new AgoraUERtcEngine();
						Instance->CreateEngine();
					}
				}

				return Instance;
			}


			agora::rtc::IRtcEngine* AgoraUERtcEngine::NativeRtcEnginePtr()
			{
				if (Instance != nullptr) {
					return Instance->RtcEngine;
				}
				
				return nullptr;
			}

			FString AgoraUERtcEngine::GetSDKVersion()
			{
				FString UEVersion = FString::Printf(TEXT("UE %d.%d.%d"), (ENGINE_MAJOR_VERSION), (ENGINE_MINOR_VERSION), (ENGINE_PATCH_VERSION));

				int SDKBuild = 0;
				const char* SDKVersionInfo = Get()->getVersion(&SDKBuild);
				FString SDKInfo = FString::Printf(TEXT("Agora SDK Version: %s Build: %d  UnrealVersion: %s"), UTF8_TO_TCHAR(SDKVersionInfo), SDKBuild, *UEVersion);
				return SDKInfo;
			}


			void AgoraUERtcEngine::EnableIOSAudioSession(bool bEnable)
			{
#if PLATFORM_IOS
				[[IOSAppDelegate GetDelegate]SetFeature:EAudioFeature::Playback Active : bEnable];
				[[IOSAppDelegate GetDelegate]SetFeature:EAudioFeature::Record Active : bEnable];
				[[IOSAppDelegate GetDelegate]SetFeature:EAudioFeature::BackgroundAudio Active : bEnable];
#endif
			}

			void AgoraUERtcEngine::Release(bool sync /*= false*/)
			{
				if (Instance != nullptr) {
					std::unique_lock<std::mutex> lock(MutexLock);
					if (Instance != nullptr) {
						Instance->DestroyEngine(sync);
						delete Instance;
						Instance = nullptr;
					}
				}

			}

			void AgoraUERtcEngine::CreateEngine()
			{
#if PLATFORM_ANDROID
				if (JNIEnv* Env = FAndroidApplication::GetJavaEnv())
				{
					static jmethodID LoadLibrary = FJavaWrapper::FindMethod(Env, FJavaWrapper::GameActivityClassID, "LoadLibrary", "()V", false);
					FJavaWrapper::CallVoidMethod(Env, FJavaWrapper::GameActivityThis, LoadLibrary);
					if (LoadLibrary != NULL)
					{
						FJavaWrapper::CallVoidMethod(Env, FJavaWrapper::GameActivityThis, LoadLibrary);
					}

					//static jmethodID LoadAndroidScreenCaptureSo = FJavaWrapper::FindMethod(Env, FJavaWrapper::GameActivityClassID, "LoadAndroidScreenCaptureSo", "()V", false);
					//if (LoadAndroidScreenCaptureSo != NULL)
					//{
					//	FJavaWrapper::CallVoidMethod(Env, FJavaWrapper::GameActivityThis, LoadAndroidScreenCaptureSo);
					//}
				}
#endif		

				RtcEngine = ::createAgoraRtcEngine();

#if AGORA_UESDK_ENABLE_VIDEO
				_VideoFrameRenderManager = MakeShareable(new VideoFrameRenderManager());
#endif
			}


			void AgoraUERtcEngine::DestroyEngine(bool sync /*= false*/)
			{
				if (RtcEngine) {
					//RtcEngine->release(sync);
					agora::rtc::IRtcEngine::release(sync);
					RtcEngine = nullptr;
#if AGORA_UESDK_ENABLE_VIDEO
					_VideoFrameRenderManager = nullptr;
					_VideoObserver = nullptr;
#endif
				}
			}


			AgoraUERtcEngine::AgoraUERtcEngine() {}
			AgoraUERtcEngine::~AgoraUERtcEngine() {}


#pragma endregion Basics





#pragma region Agora API Wrapper

{{#nodes}}
            {{#methods}}
                {{^user_data.isExcluded}}
				{{#user_data.hasConditionalDirective}}

				{{{conditional_compilation_directives_infos}}}
				{{/user_data.hasConditionalDirective}}
                {{#return_type}}{{{source}}}{{/return_type}} {{name}} ({{#parameters}}{{{type.source}}} {{name}}{{^user_data.isLast}}, {{/user_data.isLast}}{{/parameters}})
                {
                    if (RtcEngine != nullptr) {
                        auto ret = RtcEngine->{{name}}({{#parameters}}{{name}}{{^user_data.isLast}}, {{/user_data.isLast}}{{/parameters}});
                        return ret;
                    }
                    {{#user_data.hasReturnVal}}
                    return {{{user_data.failureReturnVal}}};
                    {{/user_data.hasReturnVal}}
                }
				{{#user_data.hasConditionalDirective}}
				#endif

				{{/user_data.hasConditionalDirective}}
                {{/user_data.isExcluded}}
			{{/methods}}
{{/nodes}}

#pragma endregion Agora API Wrapper

        }
    }
}